years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
nrow(salary)
length(salary)
years
length(years)
model <- lm(salary ~ years)
plot(model,col="blue")
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
model <- lm(salary ~ years)
plot(model,col="blue")
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
model <- lm(salary ~ years)
plot(model,col="blue")
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
model <- lm(salary ~ years)
plot(model,col="blue")
salaryModel <- lm(salary ~ years)
plot(salaryModel,col="blue")
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
plot(salaryModel)
plot(salary,years,col="blue")
abline(salaryModel,col="red")
salaryModel <- lm(years ~ salary)
plot(salary,years,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
salaryModel <- lm(salary ~ years)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
mean(salaryModel$residuals)
a <- data.frame(x = 2025)
result <- predict(lmodel,a)
a <- data.frame(x = 2025)
result <- predict(salaryModel,a)
print(result)
x <- c(151,174,138,186,128,136,179,163,152,131)
y <- c(63,81,56,91,47,57,76,72,62,48)
lmodel <- lm(y ~ x)
print(lmodel)
print(summary(lmodel))
windows()
plot(y,x,col="blue",main="Height And Weight Regression",xlab="Height in cm", ylab="Weight in kg")
abline(lmodel,col="red")
lmodel$residuals
mean(lmodel$residuals)
#Find the weight of person with height 170cm.
a <- data.frame(x = 170)
result <- predict(lmodel,a)
print(result)
a <- data.frame(x = 2025)
result <- predict(salaryModel,a)
print(result)
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
a <- data.frame(x = 2021)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(y = 2021)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(x = 2021)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(x = 2030)
result <- predict(salaryModel,a)
print(result)
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
barplot(salary,names.arg=years)
barplot(salary,names.arg=years)
barplot(salary,names.arg=years)
plot(years,salary,col="blue")
barplot(salary,names.arg=years)
abline(salaryModel,col="red")
summary(salaryModel)
a <- data.frame(x = 2030)
result <- predict(salaryModel,a)
print(result)
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
barplot(salary,names.arg=years)
years <- c(1993:2021)
years
salary <- c(2301,2374,2620,3134,3613,3946,4251,5506,5549,5702,5834,6293,6796,7451,7976,8763,10098,12547,14325,15609,16992,18771,19758,21043,22228,23611,27676,29707,34277)
salary
salaryModel <- lm(salary ~ years)
plot(years,salary,col="blue")
abline(salaryModel,col="red")
summary(salaryModel)
plot(years,salary,col="blue",main="Dada Salary")
abline(salaryModel,col="red")
a <- data.frame(years = 2030)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2021)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2010)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2050)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2025)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2025)
result <- predict(salaryModel,a)
print(result)
a <- data.frame(years = 2030)
result <- predict(salaryModel,a)
print(result)
summary(salaryModel)
df <- data.frame(years,salary)
summary(df)
boxplot(df)
library(readxl)
library(plyr)
library(dplyr)
library(ggmap)
######################################
#Original Dataset
######################################
#read the excel file
fileLocation <- "C:\\abhishek\\Projects\\DMW\\Citizen Complaints Data.xlsx"
citizensComplaintDataSet <- read_excel(fileLocation)
View(citizensComplaintDataSet)
nrow(citizensComplaintDataSet)
cleanDataSet1 <- (na.omit(citizensComplaintDataSet))
nrow(cleanDataSet1)
######################################
#Data Cleaning
######################################
categoriesCol <- cleanDataSet1$Category
categoriesFactor <- as.factor(categoriesCol)
categoriesFactor # Category Column as a Factor (60 Levels)
subcategoriesCol <- cleanDataSet1$Subcategory
subcategoriesFactor <- as.factor(subcategoriesCol)
subcategoriesFactor # Sub-Category Column as a Factor (299 Levels)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor # Media Column as a Factor (18 Levels)
wardOfficeCol <- cleanDataSet1$`Ward Office`
wardOfficeFactor <- as.factor(wardOfficeCol)
wardOfficeFactor # Media Column as a Factor (18 Levels)
areaCol <- cleanDataSet1$Area
areaColFactor <- as.factor(areaCol)
summary(areaColFactor)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor
######################################
#Count of each Category Level
######################################
categoryCountDF <- plyr::count(categoriesFactor) #noise (W46666)
subCategoryCountDF <- plyr::count(subcategoriesFactor)  #noise
mediaCategoryCountDF <- plyr::count(mediaFactor) #noise (CLOSED)
wardOfficeCategoryCountDF <- plyr::count(wardOfficeFactor) #noise present (dates)
areaCountDF <- plyr::count(areaColFactor)
mediaCountDF <- plyr::count(mediaFactor)
#bar charts
barplot(categoryCountDF$freq , names.arg=categoryCountDF$x)
barplot(subCategoryCountDF$freq , names.arg=subCategoryCountDF$x)
barplot(mediaCategoryCountDF$freq , names.arg=mediaCategoryCountDF$x)
barplot(wardOfficeCategoryCountDF$freq , names.arg=wardOfficeCategoryCountDF$x)
barplot(categoryCountDF$freq[1],names.arg=categoryCountDF$x[1])
#result <- filter(citizensComplaintDataSet, citizensComplaintDataSet$Category == "Garbage (Solid Waste Management)")
#pieData<- (as.factor(na.omit(result$Subcategory)))
#pieData
#pieDataDF <- plyr::count(pieData)
######################################
#Functions
######################################
getSubCategoriesNames = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
#as data cleaning not complete
resultSub <- unique(result$Subcategory)
return(resultSub)
}
getSubCategoriesDF = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
resultSC <- as.factor(result$Subcategory)
resultSCDF <- plyr::count(resultSC)
return(resultSCDF)
}
getAreaNames = function(category,subcategory){
key <- category
result <- filter(cleanDataSet1,
cleanDataSet1$Category == key,
cleanDataSet1$Subcategory == subcategory)
resultArea <- as.factor(result$Area)
#resultAreaDF <- plyr::count(resultArea)
return(resultArea)
}
getComplaintsByArea = function(category,subcategory,area){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category,
cleanDataSet1$Subcategory == subcategory,
cleanDataSet1$Area == area)
#resultDF <- plyr::count(result)
return(result)
}
getMediaByCategory = function(category){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category)
resultDF <- plyr::count(as.factor(result$Media))
return(resultDF)
}
getMediaByCategory("Road")
library(shiny); runApp('C:/abhishek/Projects/DMW/index.R')
######################################
#Libraries
######################################
library(readxl)
library(plyr)
library(dplyr)
library(ggmap)
######################################
#Original Dataset
######################################
#read the excel file
fileLocation <- "C:\\abhishek\\Projects\\DMW\\Citizen Complaints Data.xlsx"
citizensComplaintDataSet <- read_excel(fileLocation)
View(citizensComplaintDataSet)
nrow(citizensComplaintDataSet)
cleanDataSet1 <- (na.omit(citizensComplaintDataSet))
nrow(cleanDataSet1)
######################################
#Data Cleaning
######################################
categoriesCol <- cleanDataSet1$Category
categoriesFactor <- as.factor(categoriesCol)
categoriesFactor # Category Column as a Factor (60 Levels)
subcategoriesCol <- cleanDataSet1$Subcategory
subcategoriesFactor <- as.factor(subcategoriesCol)
subcategoriesFactor # Sub-Category Column as a Factor (299 Levels)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor # Media Column as a Factor (18 Levels)
wardOfficeCol <- cleanDataSet1$`Ward Office`
wardOfficeFactor <- as.factor(wardOfficeCol)
wardOfficeFactor # Media Column as a Factor (18 Levels)
areaCol <- cleanDataSet1$Area
areaColFactor <- as.factor(areaCol)
summary(areaColFactor)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor
######################################
#Count of each Category Level
######################################
categoryCountDF <- plyr::count(categoriesFactor) #noise (W46666)
subCategoryCountDF <- plyr::count(subcategoriesFactor)  #noise
mediaCategoryCountDF <- plyr::count(mediaFactor) #noise (CLOSED)
wardOfficeCategoryCountDF <- plyr::count(wardOfficeFactor) #noise present (dates)
areaCountDF <- plyr::count(areaColFactor)
mediaCountDF <- plyr::count(mediaFactor)
#bar charts
barplot(categoryCountDF$freq , names.arg=categoryCountDF$x)
barplot(subCategoryCountDF$freq , names.arg=subCategoryCountDF$x)
barplot(mediaCategoryCountDF$freq , names.arg=mediaCategoryCountDF$x)
barplot(wardOfficeCategoryCountDF$freq , names.arg=wardOfficeCategoryCountDF$x)
barplot(categoryCountDF$freq[1],names.arg=categoryCountDF$x[1])
#result <- filter(citizensComplaintDataSet, citizensComplaintDataSet$Category == "Garbage (Solid Waste Management)")
#pieData<- (as.factor(na.omit(result$Subcategory)))
#pieData
#pieDataDF <- plyr::count(pieData)
######################################
#Functions
######################################
getSubCategoriesNames = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
#as data cleaning not complete
resultSub <- unique(result$Subcategory)
return(resultSub)
}
getSubCategoriesDF = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
resultSC <- as.factor(result$Subcategory)
resultSCDF <- plyr::count(resultSC)
return(resultSCDF)
}
getAreaNames = function(category,subcategory){
key <- category
result <- filter(cleanDataSet1,
cleanDataSet1$Category == key,
cleanDataSet1$Subcategory == subcategory)
resultArea <- as.factor(result$Area)
#resultAreaDF <- plyr::count(resultArea)
return(resultArea)
}
getComplaintsByArea = function(category,subcategory,area){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category,
cleanDataSet1$Subcategory == subcategory,
cleanDataSet1$Area == area)
#resultDF <- plyr::count(result)
return(result)
}
getMediaByCategory = function(category){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category)
resultDF <- plyr::count(as.factor(result$Media))
return(resultDF)
}
getMediaByCategory("Road")
library(shiny); runApp('C:/abhishek/Projects/DMW/index.R')
cleanDataSet1
nrow(cleanDataSet1)
runApp('C:/abhishek/Projects/DMW/index.R')
library(ECharts2Shiny)
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
dat <- c(rep("Type-A", 8),
rep("Type-B", 5),
rep("Type-C", 1))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
runApp('C:/abhishek/Projects/DMW/index.R')
runApp('C:/abhishek/Projects/DMW/index.R')
library(ECharts2Shiny)
library(ECharts2Shiny)
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
dat <- c(rep("Type-A", 8),
rep("Type-B", 5),
rep("Type-C", 1))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
runApp('C:/abhishek/Projects/DMW/index.R')
FinalDataSet <- read_excel("FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("C:\\abhishek\\Projects\\DMW\\FinalComplaintsData.xlsx")
FinalDataSet <- read_excel("C:\\abhishek\\Projects\\DMW\\FinalComplaintsData .xlsx")
FinalDataSet
runApp('C:/abhishek/Projects/DMW/index.R')
runApp('C:/abhishek/Projects/DMW/index.R')
runApp('C:/abhishek/Projects/DMW/index.R')
runApp('C:/abhishek/Projects/DMW/index.R')
cleanDataSet1 <- FinalDataSet
categoriesCol <- cleanDataSet1$Category
categoriesFactor <- as.factor(categoriesCol)
categoriesFactor # Category Column as a Factor (60 Levels)
subcategoriesCol <- cleanDataSet1$Subcategory
subcategoriesFactor <- as.factor(subcategoriesCol)
subcategoriesFactor # Sub-Category Column as a Factor (299 Levels)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor # Media Column as a Factor (18 Levels)
wardOfficeCol <- cleanDataSet1$`Ward Office`
wardOfficeFactor <- as.factor(wardOfficeCol)
wardOfficeFactor # Media Column as a Factor (18 Levels)
areaCol <- cleanDataSet1$Area
areaColFactor <- as.factor(areaCol)
summary(areaColFactor)
mediaCol <- cleanDataSet1$Media
mediaFactor <- as.factor(mediaCol)
mediaFactor
categoryCountDF <- plyr::count(categoriesFactor) #noise (W46666)
subCategoryCountDF <- plyr::count(subcategoriesFactor)  #noise
mediaCategoryCountDF <- plyr::count(mediaFactor) #noise (CLOSED)
wardOfficeCategoryCountDF <- plyr::count(wardOfficeFactor) #noise present (dates)
areaCountDF <- plyr::count(areaColFactor)
mediaCountDF <- plyr::count(mediaFactor)
#bar charts
barplot(categoryCountDF$freq , names.arg=categoryCountDF$x)
barplot(subCategoryCountDF$freq , names.arg=subCategoryCountDF$x)
barplot(mediaCategoryCountDF$freq , names.arg=mediaCategoryCountDF$x)
barplot(wardOfficeCategoryCountDF$freq , names.arg=wardOfficeCategoryCountDF$x)
barplot(categoryCountDF$freq[1],names.arg=categoryCountDF$x[1])
getSubCategoriesNames = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
#as data cleaning not complete
resultSub <- unique(result$Subcategory)
return(resultSub)
}
getSubCategoriesDF = function(category){
key <- category
result <- filter(cleanDataSet1, cleanDataSet1$Category == key)
resultSC <- as.factor(result$Subcategory)
resultSCDF <- plyr::count(resultSC)
return(resultSCDF)
}
getAreaNames = function(category,subcategory){
key <- category
result <- filter(cleanDataSet1,
cleanDataSet1$Category == key,
cleanDataSet1$Subcategory == subcategory)
resultArea <- as.factor(result$Area)
#resultAreaDF <- plyr::count(resultArea)
return(resultArea)
}
getComplaintsByArea = function(category,subcategory,area){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category,
cleanDataSet1$Subcategory == subcategory,
cleanDataSet1$Area == area)
#resultDF <- plyr::count(result)
return(result)
}
getMediaByCategory = function(category){
result <- filter(cleanDataSet1,
cleanDataSet1$Category == category)
resultDF <- plyr::count(as.factor(result$Media))
return(resultDF)
}
getMediaByCategory("Road")
runApp('C:/abhishek/Projects/DMW/index.R')
arrange(categoryCountDF , freq)
arrange(categoryCountDF , freq , desc())
arrange(categoryCountDF , freq , desc)
arrange(categoryCountDF , desc(freq))
result$x[1:5]
result$x
result <- arrange(categoryCountDF , desc(freq))
result$x
result$x[1:5]
getTopFiveCategory = function(){
result <- arrange(categoryCountDF , desc(freq))
return(result)
}
runApp('C:/abhishek/Projects/DMW/index.R')
TopFiveCategory = function(){
result <- arrange(categoryCountDF , desc(freq))
return(head(result,5))
}
runApp('C:/abhishek/Projects/DMW/index.R')
getTopFiveCategory = function(){
result <- arrange(categoryCountDF , desc(freq))
return(head(result,5))
}
etTopFiveCategory = function(){
result <- arrange(categoryCountDF , desc(freq))
return(head(result,5))
}
runApp('C:/abhishek/Projects/DMW/index.R')
